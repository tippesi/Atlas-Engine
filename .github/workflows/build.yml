name: Build pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
  pull_request:
    branches: [master, opengl]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE_DEBUG: Debug
  BUILD_TYPE_RELEASE: Release
  USE_CACHE: true
  RUN_TESTS: true

jobs:
  windows-build:
    runs-on: windows-latest
    name: Build on Windows
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
        build-type: [Debug, Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore swiftshader repository cache
        uses: actions/cache/restore@v3
        id: swiftshadercache-restore
        with:
          path: ${{ github.workspace }}/swiftshader/build/Windows
          key: ${{ runner.os }}

      - name: Checkout swiftshader repository
        uses: actions/checkout@v4
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          repository: google/swiftshader
          path: swiftshader

      - name: Setup Vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        # Committish: The commit sha of the vcpkg repo, same as in vcpkg.json
        with: 
          committish: 6c937c32233bdf295ab2140dbce97fd00084a5f3
          cache: ${{ env.USE_CACHE }}

      # This doesn't work when the Visual Studio C++ CLI was set up first (maybe needs a setup with 2019 version)
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: false

      - name: Setup Microsoft Visual C++ CLI
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Run scripts
        shell: pwsh
        # Add additional scripting steps here
        run: |
          Get-ChildItem -Recurse D:/a/Atlas-Engine/Atlas-Engine/VULKAN_SDK
          cd ${{ github.workspace }}
          ${{ github.workspace }}/vcpkg/vcpkg install --clean-after-build --triplet=x64-windows
          Remove-Item –path vcpkg_installed –recurse

      - name: Build swiftshader
        uses: ashutoshvarma/action-cmake-build@master
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          build-dir: ${{ github.workspace }}/swiftshader/build
          source-dir: ${{ github.workspace }}/swiftshader
          cc: "cl"
          cxx: "cl"
          configure-options:  -G Ninja -DSWIFTSHADER_BUILD_TESTS=OFF -DSWIFTSHADER_ENABLE_ASTC=OFF
          parallel: 16
          build-type: MinSizeRel

      - name: Save swiftshader respository cache
        id: swiftshadercache-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/swiftshader/build/Windows
          key: ${{ steps.swiftshadercache-restore.outputs.cache-primary-key }}    

      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "cl"
          cxx: "cl"
          configure-options: -DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'
            -DATLAS_DEMO=ON -G Ninja
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Run tests
        shell: pwsh
        if: ${{ env.RUN_TESTS }} == true
        # Add additional scripting steps here
        run: |
          cd ${{ github.workspace }}/bin/${{ matrix.build-type }}
          .\AtlasEngineDemo.exe

      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Windows ${{ matrix.build-type }}
          path: |
            data
            README.md
            LICENSE.md
            THIRDPARTY.md
            ${{ github.workspace }}/bin/**/AtlasEngineDemo.exe
            ${{ github.workspace }}/bin/**/*.dll
            !**/CMakeFiles

  linux-build:
    runs-on: ubuntu-20.04
    name: Build on Linux
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
         build-type: [Debug, Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore swiftshader repository cache
        uses: actions/cache/restore@v3
        id: swiftshadercache-restore
        with:
          path: ${{ github.workspace }}/swiftshader/build/Linux
          key: ${{ runner.os }}

      - name: Checkout swiftshader repository
        uses: actions/checkout@v4
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          repository: google/swiftshader
          path: swiftshader

      - name: Setup Vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        # Committish: The commit sha of the vcpkg repo, same as in vcpkg.json
        with: 
          committish: 6c937c32233bdf295ab2140dbce97fd00084a5f3
          cache: ${{ env.USE_CACHE }}

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: false

      - name: Run scripts
        shell: bash
        # Add additional scripting steps here
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev
          cd ${{ github.workspace }}
          ${{ github.workspace }}/vcpkg/vcpkg install --clean-after-build --triplet=x64-linux
          rm -r vcpkg_installed

      - name: Build swiftshader
        uses: ashutoshvarma/action-cmake-build@master
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          build-dir: ${{ github.workspace }}/swiftshader/build
          source-dir: ${{ github.workspace }}/swiftshader
          cc: "gcc"
          cxx: "g++"
          configure-options:  -G Ninja -DSWIFTSHADER_BUILD_TESTS=OFF -DSWIFTSHADER_ENABLE_ASTC=OFF
          parallel: 16
          build-type: MinSizeRel

      - name: Save swiftshader respository cache
        id: swiftshadercache-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/swiftshader/build/Linux
          key: ${{ steps.swiftshadercache-restore.outputs.cache-primary-key }}    

      # https://github.com/marketplace/actions/setup-ninja
      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "gcc"
          cxx: "g++"
          configure-options: -DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'
            -DATLAS_DEMO=ON -DATLAS_DEMO=ON -G Ninja
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Run tests
        shell: bash
        if: ${{ env.RUN_TESTS }} == true
        # Add additional scripting steps here
        run: |
          cd ${{ github.workspace }}/bin/${{ matrix.build-type }}
          ./AtlasEngineDemo

      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Linux ${{ matrix.build-type }}
          path: |
            data
            README.md
            LICENSE.md
            THIRDPARTY.md
            ${{ github.workspace }}/bin/**/AtlasEngineDemo
            ${{ github.workspace }}/bin/**/*.so*
            !**/CMakeFiles

  macos-build:
    runs-on: macos-12
    name: Build on MacOS
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
        build-type: [Debug, Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Restore swiftshader repository cache
        uses: actions/cache/restore@v3
        id: swiftshadercache-restore
        with:
          path: ${{ github.workspace }}/swiftshader/build/Darwin
          key: ${{ runner.os }}

      - name: Checkout swiftshader repository
        uses: actions/checkout@v4
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          repository: google/swiftshader
          path: swiftshader

      - name: Setup Vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        # Committish: The commit sha of the vcpkg repo, same as in vcpkg.json
        with: 
          committish: 6c937c32233bdf295ab2140dbce97fd00084a5f3
          cache: ${{ env.USE_CACHE }}

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: false

      - name: Run scripts
        shell: bash
        # Add additional scripting steps here
        run: |
          cd ${{ github.workspace }}
          brew install pkg-config
          ${{ github.workspace }}/vcpkg/vcpkg install --clean-after-build --triplet=x64-osx
          rm -r vcpkg_installed

      - name: Build swiftshader
        uses: ashutoshvarma/action-cmake-build@master
        if: steps.swiftshadercache-restore.outputs.cache-hit != 'true'
        with:
          build-dir: ${{ github.workspace }}/swiftshader/build
          source-dir: ${{ github.workspace }}/swiftshader
          cc: "clang"
          cxx: "clang++"
          configure-options:  -G Ninja -DSWIFTSHADER_BUILD_TESTS=OFF -DSWIFTSHADER_ENABLE_ASTC=OFF
          parallel: 16
          build-type: MinSizeRel

      - name: Save swiftshader respository cache
        id: swiftshadercache-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/swiftshader/build/Darwin
          key: ${{ steps.swiftshadercache-restore.outputs.cache-primary-key }}

      # https://github.com/marketplace/actions/setup-ninja
      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "clang"
          cxx: "clang++"
          configure-options: -DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'
            -DATLAS_DEMO=ON -G Ninja
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Run tests
        shell: bash
        if: ${{ env.RUN_TESTS }} == true
        # Add additional scripting steps here
        run: |
          cd ${{ github.workspace }}/bin/${{ matrix.build-type }}
          find .
          ./AtlasEngineDemo

      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo MacOS ${{ matrix.build-type }}
          path: |
            data
            README.md
            LICENSE.md
            THIRDPARTY.md
            ${{ github.workspace }}/bin/**/AtlasEngineDemo
            ${{ github.workspace }}/bin/**/*.dylib*
            !**/CMakeFiles

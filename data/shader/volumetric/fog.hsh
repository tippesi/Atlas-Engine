struct Fog {
    vec4 extinctionCoefficients;
    float density;
    float heightFalloff;
    float height;
    float scatteringAnisotropy;
    float scatteringFactor;
    float extinctionFactor;
    float ambientFactor;
};

// https://developer.amd.com/wordpress/media/2012/10/Wenzel-Real-time_Atmospheric_Effects_in_Games.pdf
float ComputeVolumetricFog(Fog fog, vec3 viewPos, vec3 worldPos) {
    viewPos.y -= fog.height;
    worldPos.y -= fog.height;

    vec3 viewToWorldPos = worldPos - viewPos;

    float fogIntegration = length(viewToWorldPos) * 
        exp(-fog.heightFalloff * viewPos.y);

    float t = fog.heightFalloff * viewToWorldPos.y;
    if (abs(t) > 0.0001) {
        fogIntegration *= (1.0 - exp(-t)) / t;
    }

    return max(exp(-fog.density * fogIntegration), 0.0);
}

float GetVolumetricFogDensity(Fog fog, vec3 worldPos) {

    worldPos.y -= fog.height;

    return clamp(exp(-fog.heightFalloff * worldPos.y), 0.0, 1.0);

}

// Henyey-Greenstein phase function https://www.astro.umd.edu/~jph/HG_note.pdf
float ComputeScattering(float scatteringAnisotropy, float lightDotView) {
    // Range [-1;1]
    float g = scatteringAnisotropy;
    float g2 = g * g;
    float result = 1.0 - g2;
    result /= (4.0 * 3.14 * pow(1.0 + g2 - (2.0 * g) * lightDotView, 1.5));
    return result;
}

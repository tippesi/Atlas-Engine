#ifdef AE_TEXTURE_SHADOW_LOD
#extension GL_EXT_texture_shadow_lod : require
#endif

#include <globals.hsh>
#include <common/PI.hsh>
#include <common/ign.hsh>

// Shadow cascades
struct Cascade {
    
    float distance;
    float texelSize;

    float aligment0;
    float aligment1;

    mat4 cascadeSpace;

};

//Shadow struct has to be implemented like this
struct Shadow {
    
    float distance;
    float bias;
    
    float edgeSoftness;
    float cascadeBlendDistance;
    
    int cascadeCount;

    float aligment1;

    vec2 resolution;

    Cascade cascades[6];

};

vec2 VogelDiskSample(int sampleIndex, int samplesCount, float phi) {
  const float goldenAngle = 2.4;

  float r = sqrt(float(sampleIndex) + 0.5) / sqrt(float(samplesCount));
  float theta = float(sampleIndex) * goldenAngle + phi;

  float sine = sin(theta);
  float cosine = cos(theta);
  
  return vec2(r * cosine, r * sine);
}

// Filtering based on http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/

float offsetLookup(sampler2DArrayShadow cascadeMaps, vec2 flooredUV, float u, float v, float cascadeIndex,
    vec2 texelSize, float depth, float bias) {

    vec2 uv = 0.5 * (flooredUV + vec2(u, v) * texelSize) + 0.5;

#ifdef AE_TEXTURE_SHADOW_LOD
    // This fixes issues that can occur at cascade borders
    return textureLod(cascadeMaps, 
        vec4(uv, cascadeIndex, depth + bias), 0);
#else
    return texture(cascadeMaps, 
        vec4(uv, cascadeIndex, depth + bias));
#endif

}

float offsetLookup(sampler2DArrayShadow cascadeMaps, vec2 uv, float cascadeIndex, float edgeSoftness,
    vec2 texelSize, vec2 invResolution, vec3 fragmentPosition, int lookupIndex, float depth, float bias) {

    uv = 0.5 * (uv * invResolution) + 0.5;
    vec2 samplingSpread = edgeSoftness *  invResolution / texelSize;

    float phi = 2.0 * PI * GetInterleavedGradientNoise(fragmentPosition.xy);
    vec2 offset = VogelDiskSample(lookupIndex, 16, phi) * samplingSpread;

#ifdef AE_TEXTURE_SHADOW_LOD
    // This fixes issues that can occur at cascade borders
    return textureLod(cascadeMaps, 
        vec4(uv + offset, cascadeIndex, depth + bias), 0);
#else
    return texture(cascadeMaps, 
        vec4(uv + offset, cascadeIndex, depth + bias));
#endif

}


float cascadeLookup(Shadow shadow, sampler2DArrayShadow cascadeMaps, float cascadeIndex, mat4 cascadeTransform, 
    vec3 fragmentPosition, vec3 position, float bias, bool fade) {

    vec4 shadowCoords = cascadeTransform * vec4(fragmentPosition, 1.0);
    shadowCoords.xyz /= shadowCoords.w;
    
    float fadeout = fade ? clamp((-fragmentPosition.z + 2.0 - shadow.distance) * 0.5, 0.0, 1.0) : 0.0;    

    //shadowCoords.z = shadowCoords.z * 0.5 + 0.5;
    
    if (abs(fadeout - 1.0) < 1e-6)
        return 1.0;

    vec2 res = shadow.resolution;
    vec2 resInv = 1.0 / res;

    vec2 uv = shadowCoords.xy * res;

    vec2 flooredUV = vec2(floor(uv.x), floor(uv.y));

    float s = fract(uv.x);
    float t = fract(uv.y);

    flooredUV *= resInv;
    
    float visibility = 0.0;

#ifdef SHADOW_FILTER_1x1
    visibility += offsetLookup(cascadeMaps, shadowCoords.xy, 0.0, 0.0, float(cascadeIndex), resInv, shadowCoords.z, bias);
#endif
#ifdef SHADOW_FILTER_3x3
    float uw0 = (3.0 - 2.0 * s);
    float uw1 = (1.0 + 2.0 * s);

    float u0 = (2.0 - s) / uw0 - 1.0;
    float u1 = s / uw1 + 1.0;

    float vw0 = (3.0 - 2.0 * t);
    float vw1 = (1.0 + 2.0 * t);

    float v0 = (2.0 - t) / vw0 - 1.0;
    float v1 = t / vw1 + 1.0;

    visibility += uw0 * vw0 * offsetLookup(cascadeMaps, flooredUV, u0, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw0 * offsetLookup(cascadeMaps, flooredUV, u1, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw0 * vw1 * offsetLookup(cascadeMaps, flooredUV, u0, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw1 * offsetLookup(cascadeMaps, flooredUV, u1, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility /= 16.0;
#endif
#ifdef SHADOW_FILTER_5x5
    float uw0 = (4.0 - 3.0 * s);
    float uw1 = 7.0;
    float uw2 = (1.0 + 3.0 * s);

    float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;
    float u1 = (3.0 + s) / uw1;
    float u2 = s / uw2 + 2.0;

    float vw0 = (4.0 - 3.0 * t);
    float vw1 = 7.0;
    float vw2 = (1.0 + 3.0 * t);

    float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;
    float v1 = (3.0 + t) / vw1;
    float v2 = t / vw2 + 2.0;

    visibility += uw0 * vw0 * offsetLookup(cascadeMaps, flooredUV, u0, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw0 * offsetLookup(cascadeMaps, flooredUV, u1, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw0 * offsetLookup(cascadeMaps, flooredUV, u2, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility += uw0 * vw1 * offsetLookup(cascadeMaps, flooredUV, u0, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw1 * offsetLookup(cascadeMaps, flooredUV, u1, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw1 * offsetLookup(cascadeMaps, flooredUV, u2, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility += uw0 * vw2 * offsetLookup(cascadeMaps, flooredUV, u0, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw2 * offsetLookup(cascadeMaps, flooredUV, u1, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw2 * offsetLookup(cascadeMaps, flooredUV, u2, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility /= 144.0;
#endif
#ifdef SHADOW_FILTER_7x7
    float uw0 = (5.0 * s - 6.0);
    float uw1 = (11.0 * s - 28.0);
    float uw2 = -(11.0 * s + 17.0);
    float uw3 = -(5.0 * s + 1.0);

    float u0 = (4.0 * s - 5.0) / uw0 - 3.0;
    float u1 = (4.0 * s - 16.0) / uw1 - 1.0;
    float u2 = -(7.0 * s + 5.0) / uw2 + 1.0;
    float u3 = -s / uw3 + 3.0;

    float vw0 = (5.0 * t - 6.0);
    float vw1 = (11.0 * t - 28.0);
    float vw2 = -(11.0 * t + 17.0);
    float vw3 = -(5.0 * t + 1.0);

    float v0 = (4.0 * t - 5.0) / vw0 - 3.0;
    float v1 = (4.0 * t - 16.0) / vw1 - 1.0;
    float v2 = -(7.0 * t + 5.0) / vw2 + 1.0;
    float v3 = -t / vw3 + 3.0;

    visibility += uw0 * vw0 * offsetLookup(cascadeMaps, flooredUV, u0, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw0 * offsetLookup(cascadeMaps, flooredUV, u1, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw0 * offsetLookup(cascadeMaps, flooredUV, u2, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw3 * vw0 * offsetLookup(cascadeMaps, flooredUV, u3, v0, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility += uw0 * vw1 * offsetLookup(cascadeMaps, flooredUV, u0, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw1 * offsetLookup(cascadeMaps, flooredUV, u1, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw1 * offsetLookup(cascadeMaps, flooredUV, u2, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw3 * vw1 * offsetLookup(cascadeMaps, flooredUV, u3, v1, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility += uw0 * vw2 * offsetLookup(cascadeMaps, flooredUV, u0, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw2 * offsetLookup(cascadeMaps, flooredUV, u1, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw2 * offsetLookup(cascadeMaps, flooredUV, u2, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw3 * vw2 * offsetLookup(cascadeMaps, flooredUV, u3, v2, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility += uw0 * vw3 * offsetLookup(cascadeMaps, flooredUV, u0, v3, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw1 * vw3 * offsetLookup(cascadeMaps, flooredUV, u1, v3, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw2 * vw3 * offsetLookup(cascadeMaps, flooredUV, u2, v3, float(cascadeIndex), resInv, shadowCoords.z, bias);
    visibility += uw3 * vw3 * offsetLookup(cascadeMaps, flooredUV, u3, v3, float(cascadeIndex), resInv, shadowCoords.z, bias);

    visibility /= 2704.0;
#endif

#define SHADOW_FILTER_VOGEL

#ifdef SHADOW_FILTER_VOGEL
    visibility = 0.0;

    vec2 texelSize = vec2(shadow.cascades[int(cascadeIndex)].texelSize);
    for (int i = 0; i < 16; i++) {
        visibility += offsetLookup(cascadeMaps, uv, float(cascadeIndex), shadow.edgeSoftness, texelSize, resInv, position, i, shadowCoords.z, bias);
    }

    visibility /= 16.0;
#endif

    // Fade out shadow in the distance
    return clamp(visibility + fadeout, 0.0, 1.0);

}

float CalculateCascadedShadow(Shadow shadow, sampler2DArrayShadow cascadeMaps, vec3 fragmentPosition, vec3 normal, float cosTheta) {
    
    // Note: The code below is actually the fastest code on every platform tested
    // Some platforms have problems directly indexing the cascade array.
    // We allow 6 cascades
#ifdef SHADOW_CASCADE_BLENDING
    float distance = -fragmentPosition.z - shadow.cascadeBlendDistance;
#else
    float distance = -fragmentPosition.z;
#endif
    int cascadeIndex = 0;
    cascadeIndex = distance >= shadow.cascades[0].distance ? 1 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[1].distance ? 2 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[2].distance ? 3 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[3].distance ? 4 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[4].distance ? 5 : cascadeIndex;
    cascadeIndex = min(shadow.cascadeCount - 1, cascadeIndex);

    mat4 cascadeMatrix = shadow.cascades[0].cascadeSpace;
    cascadeMatrix = cascadeIndex > 0 ? shadow.cascades[1].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 1 ? shadow.cascades[2].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 2 ? shadow.cascades[3].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 3 ? shadow.cascades[4].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 4 ? shadow.cascades[5].cascadeSpace : cascadeMatrix;

    float texelSize = shadow.cascades[0].texelSize;
    texelSize = cascadeIndex > 0 ? shadow.cascades[1].texelSize : texelSize;
    texelSize = cascadeIndex > 1 ? shadow.cascades[2].texelSize : texelSize;
    texelSize = cascadeIndex > 2 ? shadow.cascades[3].texelSize : texelSize;
    texelSize = cascadeIndex > 3 ? shadow.cascades[4].texelSize : texelSize;
    texelSize = cascadeIndex > 4 ? shadow.cascades[5].texelSize : texelSize;
    
    vec3 bias = shadow.bias * texelSize * normal / max(cosTheta, 0.5);
    fragmentPosition += bias;

    float visibility = cascadeLookup(shadow, cascadeMaps, float(cascadeIndex),
        cascadeMatrix, fragmentPosition, fragmentPosition, 0.0, true);

#ifdef SHADOW_CASCADE_BLENDING
    if (cascadeIndex < shadow.cascadeCount - 1) {
    
        float cascadeDistance = shadow.cascades[0].distance;
        cascadeDistance = cascadeIndex > 0 ? shadow.cascades[1].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 1 ? shadow.cascades[2].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 2 ? shadow.cascades[3].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 3 ? shadow.cascades[4].distance : cascadeDistance;
    
        float blend = (cascadeDistance - distance) 
            / shadow.cascadeBlendDistance;
        blend = clamp(blend, 0.0, 1.0);

        if (blend <= 1.0) {
        
            cascadeIndex += 1;
            fragmentPosition -= bias;
            
            mat4 cascadeMatrix = shadow.cascades[0].cascadeSpace;
            cascadeMatrix = cascadeIndex > 0 ? shadow.cascades[1].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 1 ? shadow.cascades[2].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 2 ? shadow.cascades[3].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 3 ? shadow.cascades[4].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 4 ? shadow.cascades[5].cascadeSpace : cascadeMatrix;

            float texelSize = shadow.cascades[0].texelSize;
            texelSize = cascadeIndex > 0 ? shadow.cascades[1].texelSize : texelSize;
            texelSize = cascadeIndex > 1 ? shadow.cascades[2].texelSize : texelSize;
            texelSize = cascadeIndex > 2 ? shadow.cascades[3].texelSize : texelSize;
            texelSize = cascadeIndex > 3 ? shadow.cascades[4].texelSize : texelSize;
            texelSize = cascadeIndex > 4 ? shadow.cascades[5].texelSize : texelSize;

            bias = shadow.bias * texelSize * normal / max(cosTheta, 0.5);            
            fragmentPosition += bias;
            
            visibility = mix(cascadeLookup(shadow, cascadeMaps, float(cascadeIndex),
                cascadeMatrix, fragmentPosition, fragmentPosition, 0.0, true), visibility, blend);    
        }
    }
#endif

    return visibility;
}

float CalculateCascadedShadow(Shadow shadow, sampler2DArrayShadow cascadeMaps, vec3 fragmentPosition, vec3 position, vec3 normal, float cosTheta) {
    
    // Note: The code below is actually the fastest code on every platform tested
    // Some platforms have problems directly indexing the cascade array.
    // We allow 6 cascades
#ifdef SHADOW_CASCADE_BLENDING
    float distance = -fragmentPosition.z - shadow.cascadeBlendDistance;
#else
    float distance = -fragmentPosition.z;
#endif
    int cascadeIndex = 0;
    cascadeIndex = distance >= shadow.cascades[0].distance ? 1 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[1].distance ? 2 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[2].distance ? 3 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[3].distance ? 4 : cascadeIndex;
    cascadeIndex = distance >= shadow.cascades[4].distance ? 5 : cascadeIndex;
    cascadeIndex = min(shadow.cascadeCount - 1, cascadeIndex);

    mat4 cascadeMatrix = shadow.cascades[0].cascadeSpace;
    cascadeMatrix = cascadeIndex > 0 ? shadow.cascades[1].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 1 ? shadow.cascades[2].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 2 ? shadow.cascades[3].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 3 ? shadow.cascades[4].cascadeSpace : cascadeMatrix;
    cascadeMatrix = cascadeIndex > 4 ? shadow.cascades[5].cascadeSpace : cascadeMatrix;

    float texelSize = shadow.cascades[0].texelSize;
    texelSize = cascadeIndex > 0 ? shadow.cascades[1].texelSize : texelSize;
    texelSize = cascadeIndex > 1 ? shadow.cascades[2].texelSize : texelSize;
    texelSize = cascadeIndex > 2 ? shadow.cascades[3].texelSize : texelSize;
    texelSize = cascadeIndex > 3 ? shadow.cascades[4].texelSize : texelSize;
    texelSize = cascadeIndex > 4 ? shadow.cascades[5].texelSize : texelSize;
    
    vec3 bias = shadow.bias * texelSize * normal / max(cosTheta, 0.5);
    fragmentPosition += bias;

    float visibility = cascadeLookup(shadow, cascadeMaps, float(cascadeIndex),
        cascadeMatrix, fragmentPosition, position, 0.0, true);

#ifdef SHADOW_CASCADE_BLENDING
    if (cascadeIndex < shadow.cascadeCount - 1) {
    
        float cascadeDistance = shadow.cascades[0].distance;
        cascadeDistance = cascadeIndex > 0 ? shadow.cascades[1].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 1 ? shadow.cascades[2].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 2 ? shadow.cascades[3].distance : cascadeDistance;
        cascadeDistance = cascadeIndex > 3 ? shadow.cascades[4].distance : cascadeDistance;
    
        float blend = (cascadeDistance - distance) 
            / shadow.cascadeBlendDistance;
        blend = clamp(blend, 0.0, 1.0);

        if (blend <= 1.0) {
        
            cascadeIndex += 1;
            fragmentPosition -= bias;
            
            mat4 cascadeMatrix = shadow.cascades[0].cascadeSpace;
            cascadeMatrix = cascadeIndex > 0 ? shadow.cascades[1].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 1 ? shadow.cascades[2].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 2 ? shadow.cascades[3].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 3 ? shadow.cascades[4].cascadeSpace : cascadeMatrix;
            cascadeMatrix = cascadeIndex > 4 ? shadow.cascades[5].cascadeSpace : cascadeMatrix;

            float texelSize = shadow.cascades[0].texelSize;
            texelSize = cascadeIndex > 0 ? shadow.cascades[1].texelSize : texelSize;
            texelSize = cascadeIndex > 1 ? shadow.cascades[2].texelSize : texelSize;
            texelSize = cascadeIndex > 2 ? shadow.cascades[3].texelSize : texelSize;
            texelSize = cascadeIndex > 3 ? shadow.cascades[4].texelSize : texelSize;
            texelSize = cascadeIndex > 4 ? shadow.cascades[5].texelSize : texelSize;

            bias = shadow.bias * texelSize * normal / max(cosTheta, 0.5);            
            fragmentPosition += bias;
            
            visibility = mix(cascadeLookup(shadow, cascadeMaps, float(cascadeIndex),
                cascadeMatrix, fragmentPosition, position, 0.0, true), visibility, blend);    
        }
    }
#endif

    return visibility;
}

float CalculateShadowWorldSpace(Shadow shadow, sampler2DArrayShadow cascadeMaps, vec3 position, vec3 normal, float cosTheta) {
    mat4 cascadeMatrix = shadow.cascades[0].cascadeSpace;
    float texelSize = shadow.cascades[0].texelSize;

    vec3 bias = shadow.bias * texelSize * normal / max(cosTheta, 0.5);
    position += bias;

    return cascadeLookup(shadow, cascadeMaps, 0.0,
        cascadeMatrix, position, position, 0.0, false);
}
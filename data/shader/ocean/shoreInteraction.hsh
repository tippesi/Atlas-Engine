#include <sharedUniforms.hsh>

layout(set = 3, binding = 9) uniform sampler2D terrainHeight;

vec3 CalculateGerstner(vec3 position) {

    vec2 terrainTex = (vec2(position.xz) - vec2(Uniforms.terrainTranslation.xz))
        / Uniforms.terrainSideLength;

    float shoreDistance = textureLod(terrainHeight, terrainTex, 0.0).g;
    vec2 shoreGradient = normalize(2.0 * textureLod(terrainHeight, terrainTex, 0.0).ba - 1.0);

    // Avoid scaling by water depth. Resolution artifacts become obvious.
    float scale = clamp(1.0 - shoreDistance, 0.0, 1.0);
    scale *= clamp(shoreDistance * 10.0, 0.0, 1.0);

    // Should be uniforms
    float waveLength = Uniforms.shoreWaveLength / 100.0;
    float speed = Uniforms.shoreWaveSpeed / 100.0;

    float w = 1.0 / waveLength;
    float phi = speed * w;
    float rad = w * shoreDistance + phi * globalData.time;

    float modulation = saturate(sin(position.x / 20.0) + cos(position.z / 10.0));
    
    float distanceScale = saturate(1.0 - (distance(globalData.cameraLocation.xyz, position)
         - Uniforms.shoreWaveDistanceOffset) / Uniforms.shoreWaveDistanceScale);

    float amplitude = 1.0 * Uniforms.shoreWaveAmplitude * scale * modulation * distanceScale;
    float steepness = 1.0 * Uniforms.shoreWaveSteepness * scale * modulation * distanceScale;

    vec3 offset;

    float gamma = Uniforms.shoreWavePower;
    offset.y = amplitude * pow(0.5 * sin(rad) + 0.5, gamma);
    offset.xz = -shoreGradient * steepness * amplitude * pow(0.5 * cos(rad) + 0.5, gamma);

    return offset;

}

vec2 CalculateShoreInteraction(vec3 position) {

    vec2 terrainTex = (vec2(position.xz) - vec2(Uniforms.terrainTranslation.xz))
        / Uniforms.terrainSideLength;
    float shoreDistance = textureLod(terrainHeight, terrainTex, 0.0).g;

    float scale = clamp(1.0 - shoreDistance, 0.0, 1.0);
    scale *= clamp(shoreDistance * 10.0, 0.0, 1.0);

    // Should be uniforms
    float waveLength = Uniforms.shoreWaveLength / 100.0;
    float speed = Uniforms.shoreWaveSpeed / 100.0;

    float w = 1.0 / waveLength;
    float phi = speed * w;
    float rad = w * shoreDistance + phi * globalData.time;

    float modulation = saturate(sin(position.x / 20.0) + cos(position.z / 10.0));

    // Move these calculations to the fragment shader
    float foamShoreWave = max(-cos(rad), 0.0) * 1.0 * max(scale - 0.3, 0.0) * modulation;
    float breakingShoreWave = saturate(max(sin(rad - 0.7), 0.0) * 4.0 * max(scale - 0.3, 0.0)) * modulation;

    return vec2(saturate(foamShoreWave), breakingShoreWave);

}
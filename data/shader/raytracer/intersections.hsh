#include <structures.hsh>

bool IntersectAABB(Ray ray, AABB aabb, float tmin, float tmax) {
    
    vec3 t0 = (aabb.min - ray.origin) * ray.inverseDirection;
    vec3 t1 = (aabb.max - ray.origin) * ray.inverseDirection;
    
    vec3 tsmall = min(t0, t1);
    vec3 tbig = max(t0, t1);
    
    float tminf = max(max(tmin, tsmall.x), max(tsmall.y, tsmall.z));
    float tmaxf = min(min(tmax, tbig.x), min(tbig.y, tbig.z));
    
    return (tminf <= tmaxf);

}

bool IntersectAABB(Ray ray, AABB aabb, float tmin, float tmax, out float dist) {

    vec3 t0 = (aabb.min - ray.origin) * ray.inverseDirection;
    vec3 t1 = (aabb.max - ray.origin) * ray.inverseDirection;
    
    vec3 tsmall = min(t0, t1);
    vec3 tbig = max(t0, t1);
    
    float tminf = max(max(tmin, tsmall.x), max(tsmall.y, tsmall.z));
    float tmaxf = min(min(tmax, tbig.x), min(tbig.y, tbig.z));

    bool intersect = (tminf <= tmaxf);
    dist = intersect ? tminf : tmax;
    
    return intersect;

}

bool IntersectTriangle(Ray ray, vec3 v0, vec3 v1, vec3 v2,
    out vec3 sol) {

    vec3 e0 = v1 - v0;
    vec3 e1 = v2 - v0;
    vec3 s = ray.origin - v0;
    
    vec3 p = cross(s, e0);
    vec3 q = cross(ray.direction, e1);
    
    sol = vec3(dot(p, e1), dot(q, s), 
        dot(p, ray.direction)) / dot(q, e0);
        
    if (sol.x >= 0.0 && sol.y >= 0.0 &&
        sol.z >= 0.0 && sol.y + sol.z <= 1.0) {
        
        return true;
    
    }
    
    return false;

}
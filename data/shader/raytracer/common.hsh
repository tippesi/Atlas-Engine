#include <structures.hsh>
#include <../common/random.hsh>
#include <../common/PI.hsh>
#include <../common/packing.hsh>
#include <../common/utility.hsh>
#include <../common/octahedron.hsh>

#define INF 1000000000000.0
#define EPSILON 0.01

#define DIRECTIONAL_LIGHT 0
#define TRIANGLE_LIGHT 1

Triangle UnpackTriangle(PackedTriangle triangle) {    
    Triangle tri;

    tri.v0 = triangle.v0.xyz;
    tri.v1 = triangle.v1.xyz;
    tri.v2 = triangle.v2.xyz;
    
    tri.n0 = vec3(unpackUnitVector(floatBitsToInt(triangle.v0.w)));
    tri.n1 = vec3(unpackUnitVector(floatBitsToInt(triangle.v1.w)));
    tri.n2 = vec3(unpackUnitVector(floatBitsToInt(triangle.v2.w)));    
    
    tri.t = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.x)));
    tri.bt = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.y)));
    
    tri.uv0 = unpackHalf2x16(floatBitsToUint(triangle.d0.x));
    tri.uv1 = unpackHalf2x16(floatBitsToUint(triangle.d0.y));
    tri.uv2 = unpackHalf2x16(floatBitsToUint(triangle.d0.z));

    tri.color0 = unpackUnorm4x8(floatBitsToUint(triangle.d2.x));
    tri.color1 = unpackUnorm4x8(floatBitsToUint(triangle.d2.y));
    tri.color2 = unpackUnorm4x8(floatBitsToUint(triangle.d2.z));
    
    tri.materialIndex = floatBitsToInt(triangle.d0.w);
    tri.endOfNode = triangle.d1.z > 0.0 ? true : false;
    
    return tri;    
}

Ray UnpackRay(PackedRay compressed) {
    Ray ray;
    
    ray.ID = floatBitsToInt(compressed.origin.w);
    ray.origin = compressed.origin.xyz;
    ray.direction = compressed.direction.xyz;

    ray.hitID = floatBitsToInt(compressed.hit.y);
    ray.hitDistance = compressed.hit.x;
    ray.hitInstanceID = floatBitsToInt(compressed.hit.z);
    
    ray.inverseDirection = 1.0 / ray.direction;

    return ray;
}

PackedRay PackRay(Ray ray) {
    PackedRay compressed;
    
    compressed.origin.w = intBitsToFloat(ray.ID);
    compressed.origin.xyz = ray.origin;
    compressed.direction.xyz = ray.direction.xyz;

    compressed.hit.x = ray.hitDistance;
    compressed.hit.y = intBitsToFloat(ray.hitID);
    compressed.hit.z = intBitsToFloat(ray.hitInstanceID);

    
    return compressed;
}


RayPayload UnpackRayPayload(PackedRayPayload compressed) {
    RayPayload payload;

    payload.radiance.xy = unpackHalf2x16(floatBitsToUint(compressed.data.x));
    payload.throughput.xy = unpackHalf2x16(floatBitsToUint(compressed.data.y));
    vec2 comn = unpackHalf2x16(floatBitsToUint(compressed.data.z));

    payload.radiance.z = comn.x;
    payload.throughput.z = comn.y;
    
    return payload;
}

PackedRayPayload PackRayPayload(RayPayload payload) {
    PackedRayPayload compressed;

    vec2 comn = vec2(payload.radiance.z, payload.throughput.z);
    compressed.data.x = uintBitsToFloat(packHalf2x16(payload.radiance.xy));
    compressed.data.y = uintBitsToFloat(packHalf2x16(payload.throughput.xy));    
    compressed.data.z = uintBitsToFloat(packHalf2x16(comn));

    return compressed;
}

Light UnpackLight(PackedLight compressed) {

    Light light;

    light.P = compressed.P.xyz;
    light.N = compressed.N.xyz;

    light.radiance = compressed.color.rgb;

    uint data = floatBitsToUint(compressed.data.x);
    light.type = ((data & 0xF0000000u) >> 28u);

    light.triangleIdx = int(data & 0x0FFFFFFFu);
    light.instanceIdx = floatBitsToInt(compressed.data.w);

    light.pdf = compressed.data.y;
    light.area = compressed.data.z;
    light.brightness = dot(light.radiance, vec3(0.33333));

    return light;

}
#include <structures.hsh>

#define MESH_COUNT 8192

layout(std430, set = 2, binding = 13) buffer ReadAtomic {
    uint readAtomic[];
};

layout(std430, set = 2, binding = 14) buffer WriteAtomic {
    uint writeAtomic[];
};

layout (std430, set = 2, binding = 15) buffer Rays {
    PackedRay rays[];
};

layout (std430, set = 2, binding = 16) buffer RayPayloads {
    PackedRayPayload rayPayloads[];
};

layout (std430, set = 2, binding = 7) buffer Materials {
    RaytraceMaterial materials[];
};

layout(std430, set = 2, binding = 17) buffer RayBinCounters {
    uint rayBinCounters[];
};

layout(std430, set = 2, binding = 18) buffer RayBinOffsets {
    uint rayBinOffsets[];
};

layout(std430, set = 2, binding = 21) buffer Instances {
    Instance bvhInstances[];
};

layout (std430, set = 0, binding = 1) buffer Triangles {
    PackedTriangle data[];
} triangles[MESH_COUNT];

#ifndef AE_HARDWARE_RAYTRACING

layout (std430, set = 0, binding = 2) buffer BVHTriangles {
    PackedBVHTriangle data[];
}bvhTriangles[MESH_COUNT];

layout(std430, set = 0, binding = 0) buffer BlasNodes {
    PackedBVHNode data[];
}blasNodes[MESH_COUNT];

layout(std430, set = 2, binding = 22) buffer TlasNodes {
    PackedBVHNode tlasNodes[];
};

#else

layout(std430, set = 0, binding = 2) buffer GeometryTriangleOffsets {
    uint data[];
}geometryTriangleOffsets[MESH_COUNT];

#endif
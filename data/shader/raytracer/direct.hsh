#include <lights.hsh>
#include <common.hsh>
#include <surface.hsh>
#include <../common/random.hsh>

int GetLightCount() {
    return PushConstants.lightCount;
}

Light GetLight(Surface surface, float seed0, float seed1, out float lightPdf) {
    // Weight the lights in the light array based on their approximated
    // contribution to the shading point. Note that we can use a minimum
    // weight for each light to control the variance.
    Light selectedLight;
    float totalWeight = 0.0;
    lightPdf = 1.0;
    for (int i = 0; i < PushConstants.lightCount; i++) {
        Light light = UnpackLight(lights[i]);
        float weight = 1.0;
        if (light.type == uint(TRIANGLE_LIGHT)) {
            vec3 pointToLight = light.P - surface.P;
            float sqrDistance = dot(pointToLight, pointToLight);
            float lightDistance = sqrt(sqrDistance);

            vec3 L = normalize(pointToLight);
            float NdotL = max(dot(light.N, -L), 0.0);

            weight = light.brightness * light.area * NdotL / sqrDistance;
        }
        else if (light.type == uint(DIRECTIONAL_LIGHT)) {
            weight = light.brightness;
        }
        weight = clamp(weight, 0.0000001, 1.0);
        totalWeight += weight;

        float rnd = random(seed0, seed1);

        if (rnd < weight / totalWeight) {
            lightPdf = weight;
            selectedLight = light;
        }
    }
    
    // Calculate the new probability for the selected light
    lightPdf = lightPdf / totalWeight * selectedLight.pdf;
    return selectedLight;
}

void SampleLight(Light light, inout Surface surface, float seed0, float seed1, 
    out float solidAngle, out float dist) {
    // Draw a sample on the light and update the surface
    // Here we differentiate between area and punctual lights.
    if (light.type == uint(TRIANGLE_LIGHT)) { // Area lights
        LightSample lightSample;

        float r0 = random(seed0, seed1);
        float r1 = random(seed0, seed1);

        if (light.type == uint(TRIANGLE_LIGHT)) {
            Instance instance = bvhInstances[light.instanceIdx];
            Triangle tri = UnpackTriangle(triangles[light.triangleIdx + instance.triangleOffset]);
            TransformTriangle(tri, instance);
            lightSample = SampleTriangleLight(light, tri, surface, r0, r1);
        }

        vec3 pointToLight = lightSample.P - surface.P;
        float sqrDistance = dot(pointToLight, pointToLight);
        dist = sqrt(sqrDistance);

        surface.L = pointToLight / dist;
        UpdateSurface(surface);

        float NdotL = max(dot(lightSample.N, -surface.L), 0.0);
        solidAngle = NdotL / (sqrDistance * lightSample.pdf);    
    }
    else  { // Punctual lights
        solidAngle = 1.0;
        if (light.type == uint(DIRECTIONAL_LIGHT)) {
            surface.L = normalize(-light.N);
            UpdateSurface(surface);
            dist = INF;
        }
    }
}
#extension GL_EXT_nonuniform_qualifier : require

#include <structures.hsh>
#include <../globals.hsh>
#include <../common/sample.hsh>

layout (set = 2, binding = 6) uniform samplerCube environmentMap;

vec3 SampleBaseColorBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return vec3(1.0);

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).rgb;

}

float SampleOpacityBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return 1.0;

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).r;

}

vec3 SampleNormalBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return vec3(1.0);

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).rgb;

}

float SampleRoughnessBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return 1.0;

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).r;

}

float SampleMetalnessBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return 1.0;

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).r;

}

float SampleAoBilinear(int textureId, float mip, vec2 texCoord) {

    if (textureId < 0)
        return 1.0;

    return textureLod(sampler2D(bindlessTextures[nonuniformEXT(textureId)], bindlessSampler), texCoord, mip).r;

}

vec4 SampleEnvironmentMap(vec3 v) {

    return textureLod(environmentMap, v, 0);

}

vec4 SampleEnvironmentMap(vec3 v, float lod) {

    return textureLod(environmentMap, v, lod);

}
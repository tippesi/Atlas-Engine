#extension GL_EXT_nonuniform_qualifier : require

#ifdef AE_HARDWARE_RAYTRACING
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

layout(set = 2, binding = 23) uniform accelerationStructureEXT topLevelAS;

layout(std430, set = 2, binding = 22) buffer GeometryTriangleOffsets {
    uint geometryTriangleOffsets[];
};
#endif

#include <common.hsh>
#include <intersections.hsh>
#include <structures.hsh>
#include <surface.hsh>
#include <buffers.hsh>

#define STACK_SIZE 32
#define TLAS_INVALID (STACK_SIZE + 2)

#ifndef AE_HARDWARE_RAYTRACING

BVHNode UnpackNode(PackedBVHNode compressed) {
    BVHNode node;

    node.leftAABB.min = vec3(compressed.data0.x,
        compressed.data0.y, compressed.data0.z);
    node.leftAABB.max = vec3(compressed.data0.w,
        compressed.data1.x, compressed.data1.y);
    node.rightAABB.min = vec3(compressed.data1.z,
        compressed.data1.w, compressed.data2.x);
    node.rightAABB.max = vec3(compressed.data2.y,
        compressed.data2.z, compressed.data2.w);

    node.leftPtr = floatBitsToInt(compressed.data3.x);
    node.rightPtr = floatBitsToInt(compressed.data3.y);

    return node;
}

// Use local stack if there isn't much register pressure
#ifndef LOCAL_STACK
shared int stack[STACK_SIZE][32];
#endif

void CheckLeafClosest(inout Ray ray, int meshPtr, int nodePtr, float tmin, float tmax) {
        
    int triPtr = ~nodePtr;
    bool endOfNode = false;
    
    vec3 sol, v0, v1, v2, n;
    
    while (!endOfNode) {
        v0 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v0.xyz;
        v1 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v1.xyz;
        v2 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v2.xyz;
        endOfNode = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v0.w > 0.0;
        float d = 0.0;
#ifdef BACKFACE_CULLING
        n = cross(v0 - v1, v0 - v2);
        d = dot(n, ray.direction);
#endif
        bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
        if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {
            if (sol.x < ray.hitDistance) {
                ray.hitDistance = sol.x;
                ray.hitID = triPtr;
                ray.hitInstanceID = ray.currentInstanceID;
            }
        }
        triPtr++;
    }
    
}

bool CheckLeaf(inout Ray ray, int meshPtr, int nodePtr, float tmin, float tmax) {
        
    int triPtr = ~nodePtr;
    bool endOfNode = false;
    
    vec3 sol, v0, v1, v2, n;
    bool hit = false;
    
    while (!endOfNode && !hit) {
        v0 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v0.xyz;
        v1 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v1.xyz;
        v2 = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v2.xyz;
        endOfNode = bvhTriangles[nonuniformEXT(meshPtr)].data[triPtr].v0.w > 0.0;
        float d = 0.0;
#ifdef BACKFACE_CULLING
        n = cross(v0 - v1, v0 - v2);
        d = dot(n, ray.direction);
#endif
        bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
        if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {            
            hit = true;
            ray.hitDistance = sol.x;
            ray.hitID = triPtr;
            ray.hitInstanceID = ray.currentInstanceID;
        }
        triPtr++;
    }

    return hit;
    
}

void CheckLeafClosestTransparency(inout Ray ray, int meshPtr, int materialOffset,
    int nodePtr, float tmin, float tmax) {

    int triPtr = ~nodePtr;
    bool endOfNode = false;
    
    vec3 sol, v0, v1, v2, n;    
    
    while (!endOfNode) {
        Triangle tri = UnpackTriangle(triangles[nonuniformEXT(meshPtr)].data[triPtr]);
        v0 = tri.v0.xyz;
        v1 = tri.v1.xyz;
        v2 = tri.v2.xyz;
        endOfNode = tri.endOfNode;
        float d = 0.0;
#ifdef BACKFACE_CULLING
        n = cross(v0 - v1, v0 - v2);
        d = dot(n, ray.direction);
#endif
        bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
        if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0 && sol.x < ray.hitDistance) {
            float opacity = GetOpacity(tri, sol.yz, materialOffset, 0);
            if (opacity > 0.0) {
                ray.hitDistance = sol.x;
                ray.hitID = triPtr;
                ray.hitInstanceID = ray.currentInstanceID;
            }
        }
        triPtr++;
    }

}

float CheckLeafTransparency(inout Ray ray, int meshPtr, int materialOffset, int nodePtr,
    float tmin, float tmax, float transparency) {

    int triPtr = ~nodePtr;
    bool endOfNode = false;
    
    vec3 sol, v0, v1, v2, n;
    
    while (!endOfNode) {
        Triangle tri = UnpackTriangle(triangles[nonuniformEXT(meshPtr)].data[triPtr]);
        v0 = tri.v0.xyz;
        v1 = tri.v1.xyz;
        v2 = tri.v2.xyz;
        endOfNode = tri.endOfNode;
        float d = 0.0;
#ifdef BACKFACE_CULLING
        n = cross(v0 - v1, v0 - v2);
        d = dot(n, ray.direction);
#endif
        bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
        if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {
            ray.hitDistance = sol.x;
            ray.hitID = triPtr;
            ray.hitInstanceID = ray.currentInstanceID;
            transparency *= (1.0 - GetOpacity(tri, sol.yz, materialOffset, 0));
        }
        triPtr++;
    }

    return transparency;

}

void CheckInstance(inout Ray ray, inout int meshPtr, inout int materialOffset, inout int nodePtr) {

    int instancePtr = ~nodePtr;

    Instance instance = bvhInstances[instancePtr];

    // We don't normalize the direction in case there is a scale in the
    // matrix. In that case the normalization leads to wrong scales in closest hit distance
    ray.origin = vec4(ray.origin, 1.0) * instance.inverseMatrix;
    ray.direction = vec4(ray.direction, 0.0) * instance.inverseMatrix;
    ray.inverseDirection = 1.0 / ray.direction;
    ray.currentInstanceID = instancePtr;

    meshPtr = instance.meshOffset;
    materialOffset = instance.materialOffset;
    nodePtr = 0;

}

void HitClosest(inout Ray ray, float tMin, float tMax) {
    
    uint stackPtr = 1u;
    int nodePtr = 0;
    int meshPtr = 0;
    int materialOffset = 0;
    uint threadID = gl_LocalInvocationIndex;

    vec3 originalRayOrigin = ray.origin;
    vec3 originalRayDirection = ray.direction;

    ray.hitDistance = tMax;

    if (isnan3(ray.direction))
        return;

#ifdef LOCAL_STACK
    int stack[STACK_SIZE][1];
    threadID = 0;
#endif

    uint tlasIndex = TLAS_INVALID;
    
    while (stackPtr != 0u) {
        if (stackPtr < tlasIndex) {
            if (tlasIndex != TLAS_INVALID) {
                ray.origin = originalRayOrigin;
                ray.direction = originalRayDirection;
                ray.inverseDirection = 1.0 / ray.direction;
            }
            tlasIndex = TLAS_INVALID;
            if (nodePtr < 0) {
                tlasIndex = stackPtr;

                CheckInstance(ray, meshPtr, materialOffset, nodePtr);
            }
            else {
                BVHNode node = UnpackNode(tlasNodes[nodePtr]);

                float hitL = 0.0, hitR = 0.0;
                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, ray.hitDistance, hitL);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, ray.hitDistance, hitR);

                bool noIntersection = !intersectL && !intersectR;
                nodePtr = hitL <= hitR ? node.leftPtr : node.rightPtr;
                nodePtr = noIntersection ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    int stackIdx = hitL <= hitR ? node.rightPtr : node.leftPtr;
                    stack[stackPtr++][threadID] = stackIdx;
                }
            }
        }
        else {
            if(nodePtr < 0) {
                CheckLeafClosest(ray, meshPtr, nodePtr, tMin, ray.hitDistance);
                nodePtr = stack[--stackPtr][threadID];
            }
            else {
                BVHNode node = UnpackNode(blasNodes[nonuniformEXT(meshPtr)].data[nodePtr]);

                float hitL = 0.0, hitR = 0.0;
                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, ray.hitDistance, hitL);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, ray.hitDistance, hitR);

                bool noIntersection = !intersectL && !intersectR;
                nodePtr = hitL <= hitR ? node.leftPtr : node.rightPtr;
                nodePtr = noIntersection ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    int stackIdx = hitL <= hitR ? node.rightPtr : node.leftPtr;
                    stack[stackPtr++][threadID] = stackIdx;
                }
            }
        }
    }

    ray.origin = originalRayOrigin;
    ray.direction = originalRayDirection;
    ray.inverseDirection = 1.0 / ray.direction;
        
}

void HitClosestTransparency(inout Ray ray, float tMin, float tMax) {
    
    uint stackPtr = 1u;
    int nodePtr = 0;
    int meshPtr = 0;
    int materialOffset = 0;
    uint threadID = gl_LocalInvocationIndex;

    vec3 originalRayOrigin = ray.origin;
    vec3 originalRayDirection = ray.direction;

    ray.hitDistance = tMax;

    if (isnan3(ray.direction))
        return;

#ifdef LOCAL_STACK
    int stack[STACK_SIZE][1];
    threadID = 0;
#endif

    uint tlasIndex = TLAS_INVALID;
    
    while (stackPtr != 0u) {
        if (stackPtr < tlasIndex) {
            if (tlasIndex != TLAS_INVALID) {
                ray.origin = originalRayOrigin;
                ray.direction = originalRayDirection;
                ray.inverseDirection = 1.0 / ray.direction;
            }
            tlasIndex = TLAS_INVALID;
            if (nodePtr < 0) {
                tlasIndex = stackPtr;

                CheckInstance(ray, meshPtr, materialOffset, nodePtr);
            }
            else {
                BVHNode node = UnpackNode(tlasNodes[nodePtr]);

                float hitL = 0.0, hitR = 0.0;
                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, ray.hitDistance, hitL);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, ray.hitDistance, hitR);

                bool noIntersection = !intersectL && !intersectR;
                nodePtr = hitL <= hitR ? node.leftPtr : node.rightPtr;
                nodePtr = noIntersection ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    int stackIdx = hitL <= hitR ? node.rightPtr : node.leftPtr;
                    stack[stackPtr++][threadID] = stackIdx;
                }
            }
        }
        else {
            if(nodePtr < 0) {
                CheckLeafClosestTransparency(ray, meshPtr, materialOffset, nodePtr, tMin, ray.hitDistance);
                nodePtr = stack[--stackPtr][threadID];
            }
            else {
                BVHNode node = UnpackNode(blasNodes[nonuniformEXT(meshPtr)].data[nodePtr]);

                float hitL = 0.0, hitR = 0.0;
                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, ray.hitDistance, hitL);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, ray.hitDistance, hitR);

                bool noIntersection = !intersectL && !intersectR;
                nodePtr = hitL <= hitR ? node.leftPtr : node.rightPtr;
                nodePtr = noIntersection ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    int stackIdx = hitL <= hitR ? node.rightPtr : node.leftPtr;
                    stack[stackPtr++][threadID] = stackIdx;
                }
            }
        }
    }

    ray.origin = originalRayOrigin;
    ray.direction = originalRayDirection;
    ray.inverseDirection = 1.0 / ray.direction;
        
}

bool HitAny(inout Ray ray, float tMin, float tMax) {

    if (isnan3(ray.direction))
        return false;
    
    bool hit = false;

    uint stackPtr = 1u;
    int nodePtr = 0;
    int meshPtr = 0;
    int materialOffset = 0;
    uint threadID = gl_LocalInvocationIndex;

    vec3 originalRayOrigin = ray.origin;
    vec3 originalRayDirection = ray.direction;

#ifdef LOCAL_STACK
    int stack[STACK_SIZE][1];
    threadID = 0;
#endif

    uint tlasIndex = TLAS_INVALID;

    while (stackPtr != 0u && !hit) {
        if (stackPtr < tlasIndex) {
            if (tlasIndex != TLAS_INVALID) {
                ray.origin = originalRayOrigin;
                ray.direction = originalRayDirection;
                ray.inverseDirection = 1.0 / ray.direction;
            }
            tlasIndex = TLAS_INVALID;
            if (nodePtr < 0) {
                tlasIndex = stackPtr;

                CheckInstance(ray, meshPtr, materialOffset, nodePtr);
            }
            else {
                BVHNode node = UnpackNode(tlasNodes[nodePtr]);

                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, tMax);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, tMax);

                nodePtr = intersectR ? node.rightPtr : node.leftPtr;
                nodePtr = !intersectR && !intersectL ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    stack[stackPtr++][threadID] = node.leftPtr;
                }
            }
        }
        else {
            if(nodePtr < 0) {
                if (CheckLeaf(ray, meshPtr, nodePtr, tMin, tMax)) {
                    hit = true;
                }
                nodePtr = stack[--stackPtr][threadID];
            }
            else {
                BVHNode node = UnpackNode(blasNodes[nonuniformEXT(meshPtr)].data[nodePtr]);

                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, tMax);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, tMax);

                nodePtr = intersectR ? node.rightPtr : node.leftPtr;
                nodePtr = !intersectR && !intersectL ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    stack[stackPtr++][threadID] = node.leftPtr;
                }
            }
        }
    }

    ray.origin = originalRayOrigin;
    ray.direction = originalRayDirection;
    ray.inverseDirection = 1.0 / ray.direction;

    return hit;
        
}

float HitAnyTransparency(inout Ray ray, float tMin, float tMax) {

    if (isnan3(ray.direction))
        return 1.0;
    
    float transparency = 1.0;

    uint stackPtr = 1u;
    int nodePtr = 0;
    int meshPtr = 0;
    int materialOffset = 0;
    uint threadID = gl_LocalInvocationIndex;

    vec3 originalRayOrigin = ray.origin;
    vec3 originalRayDirection = ray.direction;

#ifdef LOCAL_STACK
    int stack[STACK_SIZE][1];
    threadID = 0;
#endif

    uint tlasIndex = TLAS_INVALID;

    while (stackPtr != 0u && transparency > 0.0) {
        if (stackPtr < tlasIndex) {
            if (tlasIndex != TLAS_INVALID) {
                ray.origin = originalRayOrigin;
                ray.direction = originalRayDirection;
                ray.inverseDirection = 1.0 / ray.direction;
            }
            tlasIndex = TLAS_INVALID;
            if (nodePtr < 0) {
                tlasIndex = stackPtr;

                CheckInstance(ray, meshPtr, materialOffset, nodePtr);
            }
            else {
                BVHNode node = UnpackNode(tlasNodes[nodePtr]);

                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, tMax);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, tMax);

                nodePtr = intersectR ? node.rightPtr : node.leftPtr;
                nodePtr = !intersectR && !intersectL ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    stack[stackPtr++][threadID] = node.leftPtr;
                }
            }
        }
        else {
            if(nodePtr < 0) {
                transparency *= CheckLeafTransparency(ray, meshPtr, materialOffset, nodePtr, tMin, tMax, transparency);
                if (transparency < 0.000001) {
                    transparency = 0.0;
                }
                nodePtr = stack[--stackPtr][threadID];
            }
            else {
                BVHNode node = UnpackNode(blasNodes[nonuniformEXT(meshPtr)].data[nodePtr]);

                bool intersectL = IntersectAABB(ray,
                node.leftAABB, tMin, tMax);
                bool intersectR = IntersectAABB(ray,
                node.rightAABB, tMin, tMax);

                nodePtr = intersectR ? node.rightPtr : node.leftPtr;
                nodePtr = !intersectR && !intersectL ? stack[--stackPtr][threadID] : nodePtr;

                if (intersectR && intersectL) {
                    stack[stackPtr++][threadID] = node.leftPtr;
                }
            }
        }
    }

    ray.origin = originalRayOrigin;
    ray.direction = originalRayDirection;
    ray.inverseDirection = 1.0 / ray.direction;

    return transparency;

}

#else

void HitClosest(inout Ray ray, float tMin, float tMax) {

    ray.hitDistance = tMax;

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 
        ray.origin, tMin, ray.direction, tMax);

    // Start traversal: return false if traversal is complete
    while(rayQueryProceedEXT(rayQuery)) {
        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT) {
            rayQueryConfirmIntersectionEXT(rayQuery);
        }
    }

    // Returns type of committed (true) intersection
    if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
        ray.hitDistance = rayQueryGetIntersectionTEXT(rayQuery, true);
        ray.hitInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, true);

        int geometryOffset = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, true);
        int idx = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true) + geometryOffset;

        int triangleOffset = int(geometryTriangleOffsets[idx]);
        ray.hitID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true) + triangleOffset;
    }
}

bool HitAny(inout Ray ray, float tMin, float tMax) {
    
    ray.hitDistance = tMax;

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, 
        ray.origin, tMin, ray.direction, tMax);

    // Start traversal: return false if traversal is complete
    while(rayQueryProceedEXT(rayQuery)) {
        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT) {
            rayQueryConfirmIntersectionEXT(rayQuery);
        }
    }

    // Returns type of committed (true) intersection
    if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
    {
        return true;
    }

    return false;

}

void HitClosestTransparency(inout Ray ray, float tMin, float tMax) {

    ray.hitDistance = tMax;

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 
        ray.origin, tMin, ray.direction, tMax);

    // Start traversal: return false if traversal is complete
    bool proceed = true;
    while(rayQueryProceedEXT(rayQuery)) {

        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT) {
            int geometryOffset = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, false);
            int idx = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false) + geometryOffset;

            int triangleOffset = int(geometryTriangleOffsets[idx]);
            int hitID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false) + triangleOffset;

            vec2 barrycentric = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);

            Triangle tri = UnpackTriangle(triangles[hitID]);

            if (GetOpacity(tri, barrycentric, 0) > 0.0) {
                rayQueryConfirmIntersectionEXT(rayQuery);
            }

        }
        
    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
        ray.hitDistance = rayQueryGetIntersectionTEXT(rayQuery, true);
        ray.hitInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, true);

        int geometryOffset = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, true);
        int idx = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true) + geometryOffset;

        int triangleOffset = int(geometryTriangleOffsets[idx]);
        ray.hitID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true) + triangleOffset;
    }

}

float HitAnyTransparency(inout Ray ray, float tMin, float tMax) {
    
    float transparency = 1.0;

    ray.hitDistance = tMax;

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, 
        ray.origin, tMin, ray.direction, tMax);

    while(rayQueryProceedEXT(rayQuery)) {

        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT) {
           int geometryOffset = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, false);
            int idx = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false) + geometryOffset;

            int triangleOffset = int(geometryTriangleOffsets[idx]);
            int hitID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false) + triangleOffset;

            vec2 barrycentric = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);

            Triangle tri = UnpackTriangle(triangles[hitID]);
            transparency *= (1.0 - GetOpacity(tri, barrycentric, 0));

            if (transparency < 0.001) {
                rayQueryTerminateEXT(rayQuery);
                return 0.0;
            }

        }
        
    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
        return 0.0;
    }

    return transparency;

}
#endif
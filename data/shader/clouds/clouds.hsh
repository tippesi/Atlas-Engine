#include <../common/utility.hsh>
#include <../structures>

layout(set = 3, binding = 1) uniform sampler2D depthTexture;
layout(set = 3, binding = 2) uniform sampler3D shapeTexture;
layout(set = 3, binding = 3) uniform sampler3D detailTexture;
layout(set = 3, binding = 4) uniform sampler2D coverageTexture;

layout(set = 1, binding = 10) uniform samplerCube diffuseProbe;

layout(std140, set = 3, binding = 7) uniform CloudUniformBuffer {
    Light light;

    float planetRadius;
    float innerRadius;
    float outerRadius;
    float distanceLimit;

    float heightStretch;

    float coverageScale;
    float shapeScale;
    float detailScale;
    float coverageSpeed;
    float shapeSpeed;
    float detailSpeed;
    float detailStrength;

    float extinctionFactor;
    float scatteringFactor;

    float eccentricityFirstPhase;
    float eccentricitySecondPhase;
    float phaseAlpha;

    float densityMultiplier;

    float time;
    uint frameSeed;

    int sampleCount;
    int shadowSampleCount;

    float darkEdgeFocus;
    float darkEdgeAmbient;

    vec4 extinctionCoefficients;
} cloudUniforms;

const float multiscatterAttenuation = 0.5;
const float multiscatterContribution = 0.5;
const float multiscatterEccentricityAttenuation = 0.5;

const float epsilon = 0.001;
const float logEpsilon = -log(epsilon);
const vec3 windDirection = vec3(0.4, -0.4, 0.4);
const vec3 windDirectionDetail = normalize(vec3(0.1, -0.0, 0.1));
const vec2 windDirectionCoverage = vec2(0.4, 0.4);
const float windSpeed = 0.001;

vec3 cloudPlanetCenter = -vec3(0.0, cloudUniforms.planetRadius, 0.0);

#define MULTISCATTER_OCTAVES 2

vec3 Random3(vec3 p){
    vec3 q = vec3(dot(p, vec3(127.1, 311.7, 74.7)),
                  dot(p, vec3(269.5, 183.3, 246.1)),
                  dot(p, vec3(113.5, 271.9, 124.6)));
    return fract(sin(q)*43758.5453);
}

float Worley(vec3 pos, float scale, float seed) {

    pos *= scale;
    pos += 0.5;

    vec3 base = floor(pos);
    vec3 frac = fract(pos);

    float dist = 1.0;
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                vec3 cell = vec3(x, y, z);
                vec3 r = cell - frac + Random3(mod(base + cell, scale) + seed);
                float d = dot(r, r);

                dist = min(dist, d);
            }
        }
    }

    return 1.0 - dist;

}

//    Perlin noise from Brian Sharpe
//    http://briansharpe.wordpress.com
//    https://github.com/BrianSharpe
void FAST32_hash_3D(vec3 gridcell,
                    vec3 scale,
                    out vec4 lowz_hash_0,
                    out vec4 lowz_hash_1,
                    out vec4 lowz_hash_2,
                    out vec4 highz_hash_0,
                    out vec4 highz_hash_1,
                    out vec4 highz_hash_2) {
    const vec2 OFFSET = vec2( 50.0, 161.0 );
    const float DOMAIN = 69.0;
    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );
    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );

    //    truncate the domain
    gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * ( 1.0 / DOMAIN )) * DOMAIN;
    vec3 gridcell_inc1 = step( gridcell, vec3( DOMAIN - 1.5 ) ) * ( gridcell + 1.0 );

    gridcell_inc1 = mod(gridcell_inc1, scale);

    //    calculate the noise
    vec4 P = vec4( gridcell.xy, gridcell_inc1.xy ) + OFFSET.xyxy;
    P *= P;
    P = P.xzxz * P.yyww;
    vec3 lowz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell.zzz * ZINC.xyz ) );
    vec3 highz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell_inc1.zzz * ZINC.xyz ) );
    lowz_hash_0 = fract( P * lowz_mod.xxxx );
    highz_hash_0 = fract( P * highz_mod.xxxx );
    lowz_hash_1 = fract( P * lowz_mod.yyyy );
    highz_hash_1 = fract( P * highz_mod.yyyy );
    lowz_hash_2 = fract( P * lowz_mod.zzzz );
    highz_hash_2 = fract( P * highz_mod.zzzz );
}

vec3 Interpolation_C2( vec3 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }

float Perlin3D(vec3 P, float scale) {
    vec3 Pi = floor(P);
    vec3 Pf = P - Pi;
    vec3 Pf_min1 = Pf - 1.0;

    vec4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;
    FAST32_hash_3D(Pi, vec3(scale), hashx0, hashy0, hashz0, hashx1, hashy1, hashz1 );

    //    calculate the gradients
    vec4 grad_x0 = hashx0 - 0.49999;
    vec4 grad_y0 = hashy0 - 0.49999;
    vec4 grad_z0 = hashz0 - 0.49999;
    vec4 grad_x1 = hashx1 - 0.49999;
    vec4 grad_y1 = hashy1 - 0.49999;
    vec4 grad_z1 = hashz1 - 0.49999;
    vec4 grad_results_0 = inversesqrt( grad_x0 * grad_x0 + grad_y0 * grad_y0 + grad_z0 * grad_z0 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x0 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y0 + Pf.zzzz * grad_z0 );
    vec4 grad_results_1 = inversesqrt( grad_x1 * grad_x1 + grad_y1 * grad_y1 + grad_z1 * grad_z1 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x1 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y1 + Pf_min1.zzzz * grad_z1 );

    //    Classic Perlin Interpolation
    vec3 blend = Interpolation_C2( Pf );
    vec4 res0 = mix( grad_results_0, grad_results_1, blend.z );
    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );
    float final = dot( res0, blend2.zxzx * blend2.wwyy );
    final /= sqrt(0.75);
    return 0.5 * final + 0.5;

}

float Worley4Octaves(vec3 pos, float scale, float seed, vec4 weights) {

    float octave0 = Worley(pos, 1.0 * scale, seed) * weights.x;
    float octave1 = Worley(pos, 2.0 * scale, seed) * weights.y;
    float octave2 = Worley(pos, 4.0 * scale, seed) * weights.z;
    float octave3 = Worley(pos, 8.0 * scale, seed) * weights.w;

    return (octave0 + octave1 + octave2 + octave3) / sum(weights);

}

float Perlin2Octaves(vec3 pos, float scale, vec2 weights) {

    float octave0 = Perlin3D(pos * scale, scale) * weights.x;
    float octave1 = Perlin3D(pos * 2.0 * scale, 2.0 * scale) * weights.y;

    return 0.5 * ((octave0 + octave1) / sum(weights)) + 0.5;

}

float Remap(float originalValue, float originalMin,  float originalMax, float newMin, float newMax) {
    return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

float ComputeScattering(float lightDotView, float g) {
    // Range [-1;1]
    float g2 = g * g;
    float result = 1.0 - g2;
    result /= (4.0 * 3.14 * pow(1.0 + g2 - (2.0 * g) * lightDotView, 1.5));
    return result;
}

vec2 IntersectSphere(vec3 origin, vec3 direction, vec3 pos, float radius) {

    vec3 L = pos - origin;
    float DT = dot(L, direction);
    float r2 = radius * radius;

    float ct2 = dot(L, L) - DT * DT;

    if (ct2 > r2)
    return vec2(-1.0);

    float AT = sqrt(r2 - ct2);
    float BT = AT;

    float AO = DT - AT;
    float BO = DT + BT;

    float minDist = min(AO, BO);
    float maxDist = max(AO, BO);

    return vec2(minDist, maxDist);
}

float SampleDensity(vec3 pos, vec3 shapeTexCoords, vec3 detailTexCoords,
    vec2 coverageTexCoords, vec3 weatherData, float lod, bool sampleDetail) {

    float baseCloudDensity = textureLod(shapeTexture, shapeTexCoords, lod).r;

    float distFromCenter = distance(pos, cloudPlanetCenter);
    float heightFraction = (distFromCenter - cloudUniforms.innerRadius) /
        (cloudUniforms.outerRadius - cloudUniforms.innerRadius);
    float densityHeightGradient = exp(-sqr(heightFraction * 2.0 - 1.0) / cloudUniforms.heightStretch);

    baseCloudDensity *= saturate(densityHeightGradient);

    const float cloudCoverage = min(cloudUniforms.densityMultiplier *
        (textureLod(coverageTexture, coverageTexCoords, 0.0).r + 0.5), 1.0);
    baseCloudDensity = Remap(baseCloudDensity, cloudCoverage,
    1.0, 0.0, 1.0);
    float finalCloudDensity = baseCloudDensity;

    if (baseCloudDensity > 0.0 && sampleDetail) {
        float highFrequencyFBM = textureLod(detailTexture, detailTexCoords, lod).r;

        float highFrequencyNoiseModifier = mix(highFrequencyFBM,
        1.0 - highFrequencyFBM, saturate(heightFraction * 10.0));

        finalCloudDensity = Remap(baseCloudDensity,
        highFrequencyNoiseModifier * cloudUniforms.detailStrength, 1.0, 0.0, 1.0);
    }

    return saturate(finalCloudDensity);

}
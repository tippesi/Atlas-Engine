// Contains useful functions
#include <PI.hsh>

float saturate(float value) {

    return clamp(value, 0.0, 1.0);

}

vec2 saturate(vec2 value) {

    return clamp(value, vec2(0.0), vec2(1.0));

}

vec3 saturate(vec3 value) {

    return clamp(value, vec3(0.0), vec3(1.0));

}

vec4 saturate(vec4 value) {

    return clamp(value, vec4(0.0), vec4(1.0));

}

float sqr(float value) {

    return value * value;

}

vec2 sqr(vec2 value) {

    return value * value;

}

vec3 sqr(vec3 value) {

    return value * value;

}

vec4 sqr(vec4 value) {

    return value * value;

}

float sum(vec2 value) {

    return dot(value, vec2(1.0));

}

float sum(vec3 value) {

    return dot(value, vec3(1.0));

}

float sum(vec4 value) {

    return dot(value, vec4(1.0));

}

float max3(vec3 value) {

    return max(value.x, max(value.y, value.z));

}

int max3(ivec3 value) {

    return max(value.x, max(value.y, value.z));

}

float max4(vec4 value) {

    return max(value.x, max(value.y, max(value.z, value.w)));

}

int max4(ivec4 value) {

    return max(value.x, max(value.y, max(value.z, value.w)));

}

float min3(vec3 value) {

    return min(value.x, min(value.y, value.z));

}

float min4(vec4 value) {

    return min(value.x, min(value.y, min(value.z, value.w)));

}

vec3 Cartesian(vec2 spherical) {
    float sinTheta = sin(spherical.x);
    return normalize(vec3(
        sinTheta * cos(spherical.y),
        sinTheta * sin(spherical.y),
        cos(spherical.x)
    ));
}

float atan2(in float y, in float x)
{
    return x == 0.0 ? sign(y)*PI/2 : atan(y, x);
}

vec2 Spherical(vec3 cartesian) {
    float phi = atan(cartesian.y,cartesian.x);
    float theta = atan(length(cartesian.xy),cartesian.z);
    return vec2(theta, phi);
}

bool isnan3(vec3 value) {
    return isnan(value.x) || isnan(value.y) || isnan(value.z);
}
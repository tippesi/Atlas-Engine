#define SAMPLE_REPEAT 1
#define SAMPLE_CLAMP 2

ivec3 GetTexCoordCube(vec3 dir, ivec2 size) {

    vec3 dirAbs = abs(dir);
    float ma;
    vec2 uv;
    int faceIndex;

    if(dirAbs.z >= dirAbs.x && dirAbs.z >= dirAbs.y)
    {
        faceIndex = dir.z < 0.0 ? 5 : 4;
        ma = 0.5 / dirAbs.z;
        uv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);
    }
    else if(dirAbs.y >= dirAbs.x)
    {
        faceIndex = dir.y < 0.0 ? 3 : 2;
        ma = 0.5 / dirAbs.y;
        uv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);
    }
    else
    {
        faceIndex = dir.x < 0.0 ? 1 : 0;
        ma = 0.5 / dirAbs.x;
        uv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);
    }

    uv = uv * ma + 0.5;

    ivec2 pixel = clamp(ivec2(vec2(size - 1) * uv + 0.5), ivec2(0), ivec2(size) - 1);

    return ivec3(pixel, faceIndex);

}

ivec2 GetTexCoordRepeat(ivec2 texCoord, ivec2 size) {
    
    return ivec2(texCoord.x % size.x,
        texCoord.y % size.y);
        
}

ivec2 GetTexCoordClamp(ivec2 texCoord, ivec2 size) {
    
    return clamp(texCoord, ivec2(0), size - ivec2(1));

}

vec4 sampleTex(const in sampler2D texture, ivec2 coord, const int wrapping) {

    ivec2 wrapped;
    ivec2 texSize = textureSize(texture, 0);

    if (wrapping == SAMPLE_REPEAT) {
        wrapped = GetTexCoordRepeat(coord, texSize);
    }
    else if (wrapping == SAMPLE_CLAMP) {
        wrapped = GetTexCoordClamp(coord, texSize);
    }
    else {
        wrapped = coord;
    }
    
    return texelFetch(texture, wrapped, 0);

}

vec4 sampleTex(const in sampler2D texture, vec2 coord, const int wrapping) {

    ivec2 texSize = textureSize(texture, 0) - ivec2(1);
    ivec2 texCoord = ivec2(coord * vec2(texSize) + 0.5);
    
    return sampleTex(texture, texCoord, wrapping);

}

vec4 sampleTexBilinear(const in sampler2D texture, vec2 coord, const int wrapping) {

    ivec2 texSize = textureSize(texture, 0) - ivec2(1);
    coord *= vec2(texSize) + 0.5;
    
    vec2 off = coord - floor(coord);
    
    ivec2 q00Tex, q10Tex, q01Tex, q11Tex;
    
    ivec2 texCoord = ivec2(coord);
    
    // Calculate the four texture coordinates
    if (wrapping == SAMPLE_REPEAT) {
        q00Tex = GetTexCoordRepeat(texCoord, texSize);
        q10Tex = GetTexCoordRepeat(texCoord + ivec2(1, 0), texSize);
        q01Tex = GetTexCoordRepeat(texCoord + ivec2(0, 1), texSize);
        q11Tex = GetTexCoordRepeat(texCoord + ivec2(1, 1), texSize);    
    }
    else {
        q00Tex = GetTexCoordClamp(texCoord, texSize);
        q10Tex = GetTexCoordClamp(texCoord + ivec2(1, 0), texSize);
        q01Tex = GetTexCoordClamp(texCoord + ivec2(0, 1), texSize);
        q11Tex = GetTexCoordClamp(texCoord + ivec2(1, 1), texSize);    
    }
    
    // Fetch the four texture samples
    vec4 q00 = texelFetch(texture, q00Tex, 0);
    vec4 q10 = texelFetch(texture, q10Tex, 0);
    vec4 q01 = texelFetch(texture, q01Tex, 0);
    vec4 q11 = texelFetch(texture, q11Tex, 0);
    
    // Interpolate samples horizontally
    vec4 h0 = mix(q00, q10, off.x);
    vec4 h1 = mix(q01, q11, off.x);
    
    // Interpolate samples vertically
    return mix(h0, h1, off.y);

}

vec4 sampleTex(const in sampler2DArray texture, ivec3 coord, const int wrapping) {

    ivec2 wrapped;
    ivec3 texSize = textureSize(texture, 0);

    if (wrapping == SAMPLE_REPEAT) {
        wrapped = GetTexCoordRepeat(coord.xy, texSize.xy);
    }
    else {
        wrapped = GetTexCoordClamp(coord.xy, texSize.xy);
    }
    
    return texelFetch(texture, ivec3(coord.xy, coord.z), 0);

}

vec4 sampleTex(const in sampler2DArray texture, vec3 coord, const int wrapping) {

    ivec3 texSize = textureSize(texture, 0) - ivec3(1, 1, 0);
    ivec2 texCoord = ivec2(coord.xy * vec2(texSize.xy) + 0.5);
    
    return sampleTex(texture, ivec3(texCoord, int(coord.z)), wrapping);

}

vec4 sampleTexBilinear(const in sampler2DArray texture, vec3 coord, const int wrapping) {

    ivec3 texSize = textureSize(texture, 0) - ivec3(1, 1, 0);
    coord.xy *= vec2(texSize.xy) + 0.5;
    
    vec2 off = coord.xy - floor(coord.xy);
    
    ivec2 q00Tex, q10Tex, q01Tex, q11Tex;
    
    ivec2 texCoord = ivec2(coord.xy);
    
    // Calculate the four texture coordinates
    if (wrapping == SAMPLE_REPEAT) {
        q00Tex = GetTexCoordRepeat(texCoord, texSize.xy);
        q10Tex = GetTexCoordRepeat(texCoord + ivec2(1, 0), texSize.xy);
        q01Tex = GetTexCoordRepeat(texCoord + ivec2(0, 1), texSize.xy);
        q11Tex = GetTexCoordRepeat(texCoord + ivec2(1, 1), texSize.xy);    
    }
    else {
        q00Tex = GetTexCoordClamp(texCoord, texSize.xy);
        q10Tex = GetTexCoordClamp(texCoord + ivec2(1, 0), texSize.xy);
        q01Tex = GetTexCoordClamp(texCoord + ivec2(0, 1), texSize.xy);
        q11Tex = GetTexCoordClamp(texCoord + ivec2(1, 1), texSize.xy);    
    }

    // Experiment with gather
    // vec4 s0 = texelGather(texture, ivec3(q00Tex, int(coord.z))
    
    // Fetch the four texture samples
    vec4 q00 = texelFetch(texture, ivec3(q00Tex, int(coord.z)), 0);
    vec4 q10 = texelFetch(texture, ivec3(q10Tex, int(coord.z)), 0);
    vec4 q01 = texelFetch(texture, ivec3(q01Tex, int(coord.z)), 0);
    vec4 q11 = texelFetch(texture, ivec3(q11Tex, int(coord.z)), 0);
    
    // Interpolate samples horizontally
    vec4 h0 = mix(q00, q10, off.x);
    vec4 h1 = mix(q01, q11, off.x);
    
    // Interpolate samples vertically
    return mix(h0, h1, off.y);

}
#include <surface.hsh>
#include <brdf.hsh>
#include <brdfEval.hsh>

#include <../common/PI.hsh>
#include <../common/utility.hsh>

BRDFSample SampleDiffuseBRDF(inout Surface surface, vec2 rand) {
    BRDFSample brdfSample;

    float theta = sqrt(rand.x);
    float phi = 2.0 * PI * rand.y;

    vec3 L;
    L.x = theta * cos(phi);
    L.y = theta * sin(phi);
    L.z = sqrt(1.0 - rand.x);

    vec3 N = surface.N;
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    surface.L = normalize(tangent * L.x + bitangent * L.y + N * L.z);
    UpdateSurface(surface);

    brdfSample.L = surface.L;
    brdfSample.pdf = surface.NdotL / PI;
    brdfSample.reflectance = EvaluateDiffuseBRDF(surface);
    
    return brdfSample;
}

vec3 SampleGGXVNDF(vec2 Xi, vec3 V, float alpha) {

    // Warp to the hemisphere configuration
    V = normalize(vec3(V.xy * alpha, V.z));

    // Sample a spherical cap in (-wi.z, 1]
    float phi = PI * 2.0 * Xi.x;

    float x = cos(phi);
    float y = sin(phi);
    float z = (1.0 - Xi.y) * (1.0 + V.z) + -V.z;

    vec3 c = vec3(x, y, z);
    c.xy *= sqrt(clamp(1.0 - c.z * c.z, 0.0, 1.0));

    // Compute halfway direction
    vec3 H = c + V;

    // Warp back to the ellipsoid configuration
    return vec3(H.xy * alpha, max(H.z, 0.0));

}

BRDFSample SampleSpecularBRDF(inout Surface surface, vec2 rand) {
    BRDFSample brdfSample;

    float alpha = sqr(surface.material.roughness);

    surface.V = normalize(surface.V);

    vec3 N = normalize(surface.N);
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));

    mat3 TBN = mat3(tangent, bitangent, N);
    vec3 M = normalize(TBN * SampleGGXVNDF(rand, normalize(surface.V * TBN), alpha));

    surface.L = 2.0 * dot(surface.V, M) * M - surface.V;

    UpdateSurface(surface);

    brdfSample.pdf = 1.0;
    brdfSample.reflectance = vec3(0.0);

    if (surface.NdotL > 0.0 && surface.LdotH > 0.0) {
        vec3 F = FresnelSchlick(surface.F0, surface.F90, surface.LdotH);
        float V = VisibilitySmithGGXCorrelated(surface.NdotV, surface.NdotL, alpha);
        float G1 = VisibilitySmithGGXSeparable(surface.NdotV, alpha);

        brdfSample.L = surface.L;
        brdfSample.pdf = G1 / (4.0 * abs(dot(surface.V, surface.N)));
        brdfSample.reflectance = F * V;
    }

    return brdfSample;
}

#include <../common/PI.hsh>
#include <../common/utility.hsh>
#include <../common/random.hsh>
#include <brdf.hsh>

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {

    float alpha = roughness;
    float alpha2 = sqr(alpha);

    // from spherical coordinates to cartesian coordinates
    float theta = acos(sqrt((1.0 - Xi.x) / ((alpha2 - 1.0) * Xi.x + 1.0)));
    float phi = 2.0 * PI * Xi.y;

    vec3 M = Cartesian(vec2(theta, phi));

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * M.x + bitangent * M.y + N * M.z;
    return normalize(sampleVec);

}

void ImportanceSampleGGX(vec2 Xi, vec3 N, vec3 V, float roughness,
                         out vec3 L, out float pdf) {

    vec3 H = ImportanceSampleGGX(Xi, N, roughness);
    L = normalize(2.0 * dot(V, H) * H - V);

    pdf = dot(N, H) / (4.0 * abs(dot(V, H)));

}

// Dupuy, Jonathan, and Anis Benyoub. "Sampling Visible GGX Normals with Spherical Caps."
vec3 ImportanceSampleGGXVNDF(vec2 Xi, vec3 V, float roughness) {

    // Warp to the hemisphere configuration
    V = normalize(vec3(V.xy * roughness, V.z));

    // Sample a spherical cap in (-wi.z, 1]
    float phi = PI * 2.0 * Xi.x;

    float x = cos(phi);
    float y = sin(phi);
    float z = (1.0 - Xi.y) * (1.0 + V.z) + -V.z;

    vec3 c = vec3(x, y, z);
    c.xy *= sqrt(clamp(1.0 - c.z * c.z, 0.0, 1.0));

    // Compute halfway direction
    vec3 H = c + V;

    // Warp back to the ellipsoid configuration
    return vec3(H.xy * roughness, max(H.z, 0.0));

}

void ImportanceSampleGGXVNDF(vec2 Xi, vec3 N, vec3 V, float roughness,
    out vec3 L, out float pdf) {

    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));

    mat3 TBN = mat3(tangent, bitangent, N);
    vec3 H = normalize(TBN * ImportanceSampleGGXVNDF(Xi, V * TBN, roughness));

    L = normalize(2.0 * dot(V, H) * H - V);

    float NdotV = max(dot(N, V), 0.0);
    float NdotH = max(dot(N, H), 0.0);

    float G1 = VisibilitySmithGGXSeparable(NdotV, roughness);
    float D = DistributionGGX(NdotH, roughness);

    pdf = NdotH > 0.0 ? G1 * D / (4.0 * abs(dot(V, N))) : 0.0;

}

void ImportanceSampleCosDir(vec3 N, vec2 rand, out vec3 L,
out float NdotL, out float pdf) {

    float theta = sqrt(rand.x);
    float phi = 2.0 * PI * rand.y;

    L.x = theta * cos(phi);
    L.y = theta * sin(phi);
    L.z = sqrt(1.0 - rand.x);

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    L = normalize(tangent * L.x + bitangent * L.y + N * L.z);

    NdotL = dot(L, N);
    pdf = NdotL / PI;

}

void ImportanceSampleCosDir(vec3 N, float seed0, float seed1, out vec3 L,
out float NdotL, out float pdf) {

    float u1 = random(seed0, seed1);
    float u2 = random(seed0, seed1);

    ImportanceSampleCosDir(N, vec2(u1, u2), L, NdotL, pdf);

}
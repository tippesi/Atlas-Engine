#include <../common/PI.hsh>
#include <../common/utility.hsh>
#include <../common/random.hsh>
#include <brdf.hsh>

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {

    float a = roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);

}

void ImportanceSampleGGX(vec2 Xi, vec3 N, vec3 V, float roughness,
                         out vec3 L, out float pdf) {

    vec3 H = ImportanceSampleGGX(Xi, N, roughness);
    L = normalize(2.0 * dot(V, H) * H - V);

    pdf = dot(N, H) / (4.0 * abs(dot(V, H)));

}

vec3 ImportanceSampleGGXVNDF(vec2 Xi,  vec3 V, float roughness) {

    V = normalize(vec3(V.x * roughness,
                       V.y * roughness,
                       V.z));

    vec3 t1 = (V.z < 0.999) ? normalize(cross(V, vec3(0.0, 0.0, 1.0))) : vec3(1.0, 0.0, 0.0);
    vec3 t2 = cross(V, t1);

    float r = sqrt(Xi.x);	
	float phi = 2.0 * PI * Xi.y;	
	float p1 = r * cos(phi);
	float p2 = r * sin(phi);
	float s = 0.5 * (1.0 + V.z);
	p2 = (1.0 - s)*sqrt(1.0 - p1*p1) + s*p2;

    vec3 N = p1 * t1 + p2 * t2
             + sqrt(max(0.0, 1.0 - p1 * p1 - p2 * p2)) * V;

    return normalize(vec3(roughness * N.x,
                          roughness * N.y,
                          max(N.z, 0.0)));

}

void ImportanceSampleGGXVNDF(vec2 Xi, vec3 N, vec3 V, float roughness,
                         out vec3 L, out float pdf) {

    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));

    mat3 TBN = mat3(tangent, bitangent, N);
    mat3 iTBN = transpose(TBN);

    vec3 nV = normalize(iTBN * V);

    vec3 H = normalize(TBN * ImportanceSampleGGXVNDF(Xi, nV, roughness));
    L = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(dot(N, L), 0.0);
    float LdotH = max(dot(L, H), 0.0);
    float NdotV = max(dot(N, V), 0.0);
    float NdotH = max(dot(N, H), 0.0);

    float G1 = VisibilitySmithGGXSeparable(NdotV, roughness);
    float D = DistributionGGX(NdotH, roughness);

    pdf = G1 * LdotH * D / NdotL;

}

void ImportanceSampleCosDir(vec3 N, vec2 rand, out vec3 L,
    out float NdotL, out float pdf) {

    float theta = sqrt(rand.x);
    float phi = 2.0 * PI * rand.y;

    L.x = theta * cos(phi);
    L.y = theta * sin(phi);
    L.z = sqrt(1.0 - rand.x);

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    L = normalize(tangent * L.x + bitangent * L.y + N * L.z);

    NdotL = dot(L, N);
    pdf = NdotL / PI;

}

void ImportanceSampleCosDir(vec3 N, float seed0, float seed1, out vec3 L,
    out float NdotL, out float pdf) {

    float u1 = random(seed0, seed1);
    float u2 = random(seed0, seed1);

    ImportanceSampleCosDir(N, vec2(u1, u2), L, NdotL, pdf);

}
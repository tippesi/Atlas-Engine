#include <surface.hsh>
#include <brdf.hsh>

#include <../globals.hsh>
#include <../common/PI.hsh>
#include <../common/utility.hsh>

vec3 EvaluateDiffuseBRDF(Surface surface) {

    // Perceptual roughness to roughness
    float roughness = max(sqr(surface.material.roughness), 0.00001);

    float disneyDiffuse = RenormalizedDisneyDiffuse(surface.NdotV,
        surface.NdotL, surface.LdotH, roughness);

    return (1.0 - surface.material.metalness) * surface.material.baseColor * 
        disneyDiffuse * INV_PI;

}

vec3 EvaluateSpecularBRDF(Surface surface) {

    // Perceptual roughness to roughness
    float roughness = max(sqr(surface.material.roughness), 0.00001);

    vec3 F = FresnelSchlick(surface.F0, surface.F90, surface.LdotH);
    float G = VisibilitySmithGGXCorrelated(surface.NdotV, surface.NdotL, roughness);
    float D = DistributionGGX(surface.NdotH, roughness);
    
    return F * D * G;

}

vec3 EvaluateIndirectDiffuseBRDF(Surface surface) {

    float preIntegrated = texture(dfgTexture, vec2(surface.NdotV, surface.material.roughness)).b;
    return (1.0 - surface.material.metalness) * surface.material.baseColor * preIntegrated; 

}

vec3 EvaluateIndirectSpecularBRDF(Surface surface) {

    vec2 preIntegrated = texture(dfgTexture, vec2(surface.NdotV, surface.material.roughness)).rg;
    return surface.F0 * preIntegrated.x + surface.F90 * preIntegrated.y;

}